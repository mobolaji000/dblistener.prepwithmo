# This is a basic workflow to help you get started with Actions

name: Deploy To Dev Digital Ocean Droplet

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "dev" branch
  push:
    branches: [ "dev" ]
#  pull_request:
#    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build Docker Images
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job #
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/home/mobolaji00/dblistener.prepwithmo
          rsync -ra -e ssh --include '*/' --exclude='.git/*' $(pwd)/ mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/home/mobolaji00/dblistener.prepwithmo/
          ssh -o StrictHostKeyChecking=no mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /home/mobolaji00/dblistener.prepwithmo
            echo "${{ secrets.DROPLET_SUDO_PASSWORD }}" | sudo -S chmod 775 /home/mobolaji00/dblistener.prepwithmo
            source .env
            echo "y" |docker system prune
            echo "${{ secrets.DROPLET_SUDO_PASSWORD }}" | sudo -S service docker stop
            echo "${{ secrets.DROPLET_SUDO_PASSWORD }}" | sudo -S service docker start
            docker compose down
            docker compose -f docker-compose-dev.yml build 
            docker compose -f docker-compose-dev.yml up 
            exit
          ENDSSH

      - name: Ping health endpoint
        id: ping_health_endpoint
        run:  |
          sleep 5
          cmd=$(curl -v -s -o /dev/null  -H 'Accept: text/html' -H 'Cache-Control: no-cache' -H 'Connection: keep-alive' -w "%{http_code}"  http://${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:5003/health) 
          echo "::set-output name=cmd::$cmd"
          echo $cmd

      - name: Confirm failure
        if: steps.ping_health_endpoint.outputs.cmd != 200
        run: |
          echo ${{steps.ping_health_endpoint.outputs.cmd}}
          echo "Failed!"
          exit 1

      - name: Confirm success
        if: steps.ping_health_endpoint.outputs.cmd == 200
        run: |
          echo ${{steps.ping_health_endpoint.outputs.cmd}}
          echo "Completed!"


